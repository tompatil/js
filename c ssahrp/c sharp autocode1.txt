using System;
using System.Linq;
using System.Reflection;
using System.Windows.Forms;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Emit;
using System.IO;
//dotnet add package Microsoft.CodeAnalysis.CSharp(install it in nuget packge console)
//Install-Package Microsoft.CodeAnalysis.CSharp.Scripting(install it in nuget packge console)

namespace test_charp
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }

        private void button1_Click(object sender, EventArgs e)
        {
            int x = 1;
            int y = 1;
            string txt = "if (x == y) { MessageBox.Show(\"right\"); } else { MessageBox.Show(\"wrong\"); }";

            string code = @"
using System;
using System.Windows.Forms;

public class RuntimeExecutor
{
    public void Execute(int x, int y)
    {
        " + txt + @"
    }
}";

            var syntaxTree = CSharpSyntaxTree.ParseText(code);
            var references = AppDomain.CurrentDomain.GetAssemblies()
                .Where(a => !a.IsDynamic)
                .Select(a => MetadataReference.CreateFromFile(a.Location))
                .Cast<MetadataReference>()
                .ToList();

            var compilation = CSharpCompilation.Create(
                "DynamicAssembly",
                new[] { syntaxTree },
                references,
                new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));

            using (var ms = new MemoryStream())
            {
                EmitResult result = compilation.Emit(ms);

                if (!result.Success)
                {
                    var failures = result.Diagnostics.Where(diagnostic =>
                        diagnostic.IsWarningAsError ||
                        diagnostic.Severity == DiagnosticSeverity.Error);

                    string errors = string.Join(Environment.NewLine, failures.Select(f => $"{f.Id}: {f.GetMessage()}"));
                    MessageBox.Show("Compilation error: " + errors);
                }
                else
                {
                    ms.Seek(0, SeekOrigin.Begin);
                    var assembly = Assembly.Load(ms.ToArray());

                    var type = assembly.GetType("RuntimeExecutor");
                    var obj = Activator.CreateInstance(type);
                    var method = type.GetMethod("Execute");

                    // Execute the method with parameters
                    method.Invoke(obj, new object[] { x, y });
                }
            }
        }
    }
}

