
https://www.geeksforgeeks.org/steps-to-create-an-express-js-application/?ref=lbp
1)npm install express

2)Use require('express') to import the Express module.

Call express() to create an Express application instance.
Define the port for the application, typically 3000.
Set up a basic GET route with app.get('/', (req, res) => res.send('Hello World!')).
Use app.listen method to listen to your desired PORT and to start the server.



const express = require('express');

const app = express(); This line creates an instance of an Express application.
const PORT = 8080;

app.get('/', (req, res) => {
    res.send('Hello World!'); // Sends a response to the client
});

app.listen(PORT, (error) => {
    if (!error) {
        console.log("Server is Successfully Running, and App is listening on port " + PORT);
    } else {
        console.log("Error occurred, server can't start", error);
    }
});



3)
The set() function is used to set the HTTP header’s content type as HTML. When the browser receives this response it will be interpreted as HTML instead of plain text.


access the ‘/hello’ route from the browser localhost:3000/hello

//app.js

const express = require('express');
const app = express();
const PORT = 3000;

app.get('/hello', (req, res)=>{
    res.set('Content-Type', 'text/html');
    res.status(200).send("<h1>Hello GFG Learner!</h1>");
});

app.listen(PORT, (error) =>{
    if(!error)
        console.log("Server is Successfully Running, and App is
                      listening on port "+ PORT)
    else 
        console.log("Error occurred, server can't start", error);
    }
);



4) hello 
a)Using Basic Routes: by defining a root URL (“/”)
const express = require('express');
const app = express();

app.get('/', (req, res) => {
res.send('<h1> Hello, World! </h1>');
});

app.listen(8000, () => {
console.log(`Server is listening at http://localhost:8000`);
});
b)Using Middleware:	
const express = require('express');
const app = express();

app.use((req, res) => {
res.send('<h1>Hello, World!</h1>');
});

app.listen(8000, () => console.log('Server listening on port 8000'));

5)First Router
what is router 
A router is a JavaScript object that maps URLs to functions. The router calls a function based on the URL. In the past, a web application was a series of interconnected pages. 





The express.Router() function is used to create a new router object. This function is used when you want to create a new router object in your program to handle requests. Multiple requests can be easily differentiated with the help of the Router() function in Express.js.This is the advantage of the use of the Router..
 Allows you to define routes in separate files
// Importing express module 
const express=require("express") 
const router=express.Router() 

// Handling request using router 
router.get("/home",(req,res,next)=>{ 
	res.send("This is the homepage request") 
}) 

// Importing the router 
module.exports=router





6)req and res
We have a ‘req‘ (request) object in Express JS which is used to represent the incoming HTTP request that consists of data like parameters, query strings, and also the request body. Along with this, we have ‘res‘ (response) which is used to send the HTTP response to the client which allows the modification of headers and consists of status codes, and resources.
ts ‘req‘ and ‘res‘ are responsible for handling the HTTP requests and responses in the web applications.

1. req (Request) Object:
Accessing the Request Data: By using the req object, we can access the various components of the incoming HTTP request which consists of data, headers, parameters, etc.

Routing: By implementing the dynamic routes in the application, the req object can be used as it captures the URL parameters and also allows it to respond dynamically based on the client’s input.
2. res (Response) Object:
Send Responses: The res object is used to send the HTP responses to the client which includes the resource, data, status codes, and headers.
Error Handling: Using the res object we can send the error responses which is important for handling the errors and providing feedback to the client.
Content Modification: We can set the custom response headers, status codes, and content through which the response control can be managed by us.


7)other
EXPRESS method - json,raw,router,static,text,urlencoded
req methods- app,baseurl,body,cookies,fresh,accepts,
res methods- 
app,headersent,locals,append,attachemnt,cookie,
clearcookie,download,end




various middleware functions:-
These middleware functions are essential for handling different types of request payloads in an Express.js application. They allow developers to easily parse and manage incoming data based on its format, facilitating smoother request handling and response generation.







### 3. **express.raw()**
- **Purpose**: Parses incoming requests with a raw buffer payload.
- **Usage**: Useful when you want to handle binary data or raw data without any parsing.
- **Syntax**:
  ```javascript
  app.use(express.raw());
  ```
- **Functionality**: It populates `req.body` with a Buffer containing the raw data [5].



### 6. **express.text()**
- **Purpose**: Parses incoming requests with text payloads.
- **Usage**: Used when the request's `Content-Type` is `text/plain`.
- **Syntax**:
  ```javascript
  app.use(express.text());
  ```
- **Functionality**: It populates `req.body` with the parsed text string [5][6].

### Summary

