To build an Employee Management System using Node.js, Express, and React, you can follow these key steps:

### 1. **Set up Backend (Node.js & Express)**

#### a. Initialize the Node.js Project
- Run `npm init` to create a `package.json` file.
- Install necessary packages:

  npm install express mongoose cors dotenv


#### b. Create Express Server
- Create a new file, `server.js`, to configure Express and define your routes:

  const express = require('express');
  const cors = require('cors');
  const mongoose = require('mongoose');
  const dotenv = require('dotenv');

  dotenv.config();
  const app = express();

  // Middleware
  app.use(cors());
  app.use(express.json());

  // MongoDB Connection
  mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log("MongoDB connected"))
    .catch(err => console.log(err));

  // Routes
  const employeeRoutes = require('./routes/employees');
  app.use('/api/employees', employeeRoutes);

  const PORT = process.env.PORT || 5000;
  app.listen(PORT, () => console.log(`Server running on port ${PORT}`));


#### c. Define Routes & Controller
- Create a directory `routes/` with a file `employees.js` for the employee-related API routes:

  const express = require('express');
  const router = express.Router();
  const { getEmployees, addEmployee, deleteEmployee, updateEmployee } = require('../controllers/employeeController');

  router.get('/', getEmployees);
  router.post('/', addEmployee);
  router.delete('/:id', deleteEmployee);
  router.put('/:id', updateEmployee);

  module.exports = router;


- Create a `controllers/employeeController.js` for CRUD operations:

  const Employee = require('../models/Employee');

  // Get all employees
  const getEmployees = async (req, res) => {
    try {
      const employees = await Employee.find();
      res.status(200).json(employees);
    } catch (error) {
      res.status(500).json({ error: "Server error" });
    }
  };

  // Add a new employee
  const addEmployee = async (req, res) => {
    const { name, position, salary } = req.body;
    try {
      const newEmployee = new Employee({ name, position, salary });
      await newEmployee.save();
      res.status(201).json(newEmployee);
    } catch (error) {
      res.status(500).json({ error: "Server error" });
    }
  };

  // Delete an employee
  const deleteEmployee = async (req, res) => {
    try {
      const employee = await Employee.findByIdAndDelete(req.params.id);
      res.status(200).json({ message: "Employee deleted" });
    } catch (error) {
      res.status(500).json({ error: "Server error" });
    }
  };

  // Update employee details
  const updateEmployee = async (req, res) => {
    try {
      const updatedEmployee = await Employee.findByIdAndUpdate(req.params.id, req.body, { new: true });
      res.status(200).json(updatedEmployee);
    } catch (error) {
      res.status(500).json({ error: "Server error" });
    }
  };

  module.exports = { getEmployees, addEmployee, deleteEmployee, updateEmployee };


#### d. Define Employee Model
- Create a `models/Employee.js` file:

  const mongoose = require('mongoose');

  const employeeSchema = new mongoose.Schema({
    name: {
      type: String,
      required: true
    },
    position: {
      type: String,
      required: true
    },
    salary: {
      type: Number,
      required: true
    }
  });

  module.exports = mongoose.model('Employee', employeeSchema);


### 2. **Set up Frontend (React)**

#### a. Create React App
- Create a React app using `npx create-react-app employee-mgmt-system`.
- Install `axios` for making API requests:

  npm install axios


#### b. Create Employee Component
- In the `src/` folder, create components for listing, adding, and updating employees.

1. **EmployeeList.js** for displaying all employees:
 
   import React, { useEffect, useState } from 'react';
   import axios from 'axios';

   const EmployeeList = () => {
     const [employees, setEmployees] = useState([]);

     useEffect(() => {
       axios.get('/api/employees')
         .then(res => setEmployees(res.data))
         .catch(err => console.error(err));
     }, []);

     return (
       <div>
         <h2>Employee List</h2>
         <ul>
           {employees.map(emp => (
             <li key={emp._id}>{emp.name} - {emp.position} - ${emp.salary}</li>
           ))}
         </ul>
       </div>
     );
   };

   export default EmployeeList;
 

2. **AddEmployee.js** for adding a new employee:
 
   import React, { useState } from 'react';
   import axios from 'axios';

   const AddEmployee = () => {
     const [name, setName] = useState('');
     const [position, setPosition] = useState('');
     const [salary, setSalary] = useState('');

     const handleSubmit = (e) => {
       e.preventDefault();
       axios.post('/api/employees', { name, position, salary })
         .then(res => alert("Employee Added"))
         .catch(err => console.error(err));
     };

     return (
       <form onSubmit={handleSubmit}>
         <input type="text" placeholder="Name" value={name} onChange={(e) => setName(e.target.value)} />
         <input type="text" placeholder="Position" value={position} onChange={(e) => setPosition(e.target.value)} />
         <input type="number" placeholder="Salary" value={salary} onChange={(e) => setSalary(e.target.value)} />
         <button type="submit">Add Employee</button>
       </form>
     );
   };

   export default AddEmployee;
 

### 3. **Connecting Frontend and Backend**

Ensure your frontend and backend communicate by configuring the proxy in the React app. Add this to your `package.json`:
```json
"proxy": "http://localhost:5000"
```

### 4. **Run the Application**

- In the `backend/` folder, run:

  node server.js

- In the `frontend/` folder, run:

  npm start


### Additional Features
- You can add more features like authentication (using JWT) or improve the UI using libraries like Material-UI or Bootstrap. You can also handle state management with Redux if necessary.

This setup provides a basic framework for an Employee Management System with React, Node.js, Express, and MongoDB.